Certainly! Here's a simple outline for your to-do list application in Python using file handling for data persistence. I'll provide a basic structure, and you can build upon it:

python
import json
from datetime import datetime, timedelta

# File to store tasks
TASKS_FILE = "tasks.json"

# Function to load tasks from file
def load_tasks():
    try:
        with open(TASKS_FILE, "r") as file:
            tasks = json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        tasks = []
    return tasks

# Function to save tasks to file
def save_tasks(tasks):
    with open(TASKS_FILE, "w") as file:
        json.dump(tasks, file, indent=2)

# Function to add a new task
def add_task(tasks, task_name, priority, due_date):
    new_task = {
        "name": task_name,
        "priority": priority,
        "due_date": due_date,
        "completed": False,
    }
    tasks.append(new_task)
    save_tasks(tasks)

# Function to remove a task
def remove_task(tasks, task_index):
    if 0 <= task_index < len(tasks):
        del tasks[task_index]
        save_tasks(tasks)
    else:
        print("Invalid task index.")

# Function to mark a task as completed
def mark_completed(tasks, task_index):
    if 0 <= task_index < len(tasks):
        tasks[task_index]["completed"] = True
        save_tasks(tasks)
    else:
        print("Invalid task index.")

# Function to display tasks
def display_tasks(tasks):
    if tasks:
        for i, task in enumerate(tasks):
            status = "Completed" if task["completed"] else "Not Completed"
            print(
                f"{i + 1}. {task['name']} | Priority: {task['priority']} | Due Date: {task['due_date']} | Status: {status}"
            )
    else:
        print("No tasks found.")

# Main function
def main():
    tasks = load_tasks()

    while True:
        print("\n=== To-Do List ===")
        print("1. Add Task")
        print("2. Remove Task")
        print("3. Mark Task as Completed")
        print("4. Display Tasks")
        print("0. Exit")

        choice = input("Enter your choice: ")

        if choice == "1":
            task_name = input("Enter task name: ")
            priority = input("Enter priority (High/Medium/Low): ")
            due_date_str = input("Enter due date (YYYY-MM-DD): ")
            
            try:
                due_date = datetime.strptime(due_date_str, "%Y-%m-%d").date()
            except ValueError:
                print("Invalid date format. Please use YYYY-MM-DD.")
                continue
            https://github.com/Hymavathi38/application/tree/main
            add_task(tasks, task_name, priority, due_date)

        elif choice == "2":
            task_index = int(input("Enter task index to remove: ")) - 1
            remove_task(tasks, task_index)

        elif choice == "3":
            task_index = int(input("Enter task index to mark as completed: ")) - 1
            mark_completed(tasks, task_index)

        elif choice == "4":
            display_tasks(tasks)

        elif choice == "0":
            print("Exiting...")
            break

        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()


This is a basic command-line to-do list application that includes the specified features. You can expand or modify it based on your requirements.
